import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaInstance, cordova, checkAvailability } from '@ionic-native/core';
import { Observable } from 'rxjs';
var PluginDemo = /** @class */ (function (_super) {
    __extends(PluginDemo, _super);
    function PluginDemo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PluginDemo.prototype.init = function (options) {
        if (checkAvailability('PluginDemo', 'init', 'PluginDemo') === true) {
            if (typeof window !== 'undefined') {
                this._objectInstance = window.PluginDemo.init(options);
            }
        }
    };
    PluginDemo.prototype.coolMethod = function (arg1) { return cordova(this, "coolMethod", {}, arguments); };
    PluginDemo.prototype.on = function (event) { return cordovaInstance(this, "on", { "observable": true, "clearFunction": "off", "clearWithArgs": true }, arguments); };
    PluginDemo.pluginName = "PluginDemo";
    PluginDemo.plugin = "cordova-plugin-plugindemo";
    PluginDemo.pluginRef = "PluginDemo";
    PluginDemo.repo = "https://github.com/durga0303/PluginDemo.git";
    PluginDemo.install = "";
    PluginDemo.platforms = ["iOS"];
    PluginDemo = __decorate([
        Injectable()
    ], PluginDemo);
    return PluginDemo;
}(IonicNativePlugin));
export { PluginDemo };
/*
 * @hidden
 */
// @Plugin({
//   pluginName: 'PluginDemo',
//   plugin: 'cordova-plugin-plugindemo',
//   pluginRef: 'PluginDemo'
// })
// export class PushObject {
//   private _objectInstance: any;
//   constructor(options: PushOptions) {
//     if (
//       checkAvailability('PluginDemo', 'init', 'PluginDemo') === true
//     ) {
//       if (typeof window !== 'undefined') {
//         this._objectInstance = window.PluginDemo.init(options);
//       }
//     }
//   }
//   /*
//    * Adds an event listener
//    * @param event {string}
//    * @return {Observable<EventResponse>}
//    */
//   @CordovaInstance({
//     observable: true,
//     clearFunction: 'off',
//     clearWithArgs: true
//   })
//   on(event: string): Observable<EventResponse> {
//     return;
//   }
//   /**
//    * The unregister method is used when the application no longer wants to receive push notifications.
//    * Beware that this cleans up all event handlers previously registered,
//    * so you will need to re-register them if you want them to function again without an application reload.
//    */
//   // @CordovaInstance()
//   // unregister(): Promise<any> {
//   //   return;
//   // }
//   /*
//    * Set the badge count visible when the app is not running
//    *
//    * The count is an integer indicating what number should show up in the badge.
//    * Passing 0 will clear the badge.
//    * Each notification event contains a data.count value which can be used to set the badge to correct number.
//    * @param count
//    */
//   // @CordovaInstance({
//   //   callbackOrder: 'reverse'
//   // })
//   // setApplicationIconBadgeNumber(count?: number): Promise<any> {
//   //   return;
//   // }
//   /**
//    * Get the current badge count visible when the app is not running
//    * successHandler gets called with an integer which is the current badge count
//    */
//   // @CordovaInstance()
//   // getApplicationIconBadgeNumber(): Promise<number> {
//   //   return;
//   // }
//   /*
//    * iOS only
//    * Tells the OS that you are done processing a background push notification.
//    * successHandler gets called when background push processing is successfully completed.
//    * @param [id]
//    */
//   // @CordovaInstance({
//   //   callbackOrder: 'reverse'
//   // })
//   // finish(id?: string): Promise<any> {
//   //   return;
//   // }
//   /**
//    * Tells the OS to clear all notifications from the Notification Center
//    */
//   // @CordovaInstance()
//   // clearAllNotifications(): Promise<any> {
//   //   return;
//   // }
//   /*
//    * The subscribe method is used when the application wants to subscribe a new topic to receive push notifications.
//    * @param topic {string} Topic to subscribe to.
//    * @return {Promise<any>}
//    */
//   // @CordovaInstance()
//   // subscribe(topic: string): Promise<any> {
//   //   return;
//   // }
//   /*
//    * The unsubscribe method is used when the application no longer wants to receive push notifications
//    * from a specific topic but continue to receive other push messages.
//    * @param topic {string} Topic to unsubscribe from.
//    * @return {Promise<any>}
//    */
//   // @CordovaInstance()
//   // unsubscribe(topic: string): Promise<any> {
//   //   return;
//   // }
// }
//# sourceMappingURL=data:application/json;base64,