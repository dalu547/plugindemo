var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaInstance, cordova, checkAvailability } from '@ionic-native/core';
import { Observable } from 'rxjs';
var PluginDemoOriginal = /** @class */ (function (_super) {
    __extends(PluginDemoOriginal, _super);
    function PluginDemoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PluginDemoOriginal.prototype.init = function (options) {
        if (checkAvailability('PluginDemo', 'init', 'PluginDemo') === true) {
            if (typeof window !== 'undefined') {
                this._objectInstance = window.PluginDemo.init(options);
            }
        }
    };
    PluginDemoOriginal.prototype.coolMethod = function (arg1) { return cordova(this, "coolMethod", {}, arguments); };
    PluginDemoOriginal.prototype.on = function (event) { return cordovaInstance(this, "on", { "observable": true, "clearFunction": "off", "clearWithArgs": true }, arguments); };
    PluginDemoOriginal.pluginName = "PluginDemo";
    PluginDemoOriginal.plugin = "cordova-plugin-plugindemo";
    PluginDemoOriginal.pluginRef = "PluginDemo";
    PluginDemoOriginal.repo = "https://github.com/durga0303/PluginDemo.git";
    PluginDemoOriginal.install = "";
    PluginDemoOriginal.platforms = ["iOS"];
    return PluginDemoOriginal;
}(IonicNativePlugin));
var PluginDemo = new PluginDemoOriginal();
export { PluginDemo };
//# sourceMappingURL=data:application/json;base64,