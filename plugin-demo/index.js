var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaInstance, cordova, checkAvailability } from '@ionic-native/core';
import { Observable } from 'rxjs';
var PluginDemoOriginal = /** @class */ (function (_super) {
    __extends(PluginDemoOriginal, _super);
    function PluginDemoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /*
     * Init push notifications
     * @param options {PushOptions}
     * @return {PushObject}
     */
    PluginDemoOriginal.prototype.init = function (options) {
        return new PushObject(options);
    };
    PluginDemoOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    PluginDemoOriginal.prototype.createChannel = function (channel) { return cordova(this, "createChannel", { "callbackOrder": "reverse" }, arguments); };
    PluginDemoOriginal.prototype.deleteChannel = function (id) { return cordova(this, "deleteChannel", { "callbackOrder": "reverse" }, arguments); };
    PluginDemoOriginal.prototype.listChannels = function () { return cordova(this, "listChannels", {}, arguments); };
    PluginDemoOriginal.prototype.coolMethod = function (arg1) { return cordova(this, "coolMethod", {}, arguments); };
    PluginDemoOriginal.pluginName = "PluginDemo";
    PluginDemoOriginal.plugin = "cordova-plugin-plugindemo";
    PluginDemoOriginal.pluginRef = "PluginDemo";
    PluginDemoOriginal.repo = "https://github.com/durga0303/PluginDemo.git";
    PluginDemoOriginal.install = "";
    PluginDemoOriginal.platforms = ["iOS"];
    return PluginDemoOriginal;
}(IonicNativePlugin));
var PluginDemo = new PluginDemoOriginal();
export { PluginDemo };
var PushObject = /** @class */ (function () {
    function PushObject(options) {
        if (checkAvailability('PluginDemo', 'init', 'PluginDemo') === true) {
            if (typeof window !== 'undefined') {
                this._objectInstance = window.PluginDemo.init(options);
            }
        }
    }
    PushObject.prototype.on = function (event) { return cordovaInstance(this, "on", { "observable": true, "clearFunction": "off", "clearWithArgs": true }, arguments); };
    PushObject.prototype.unregister = function () { return cordovaInstance(this, "unregister", {}, arguments); };
    PushObject.prototype.setApplicationIconBadgeNumber = function (count) { return cordovaInstance(this, "setApplicationIconBadgeNumber", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.getApplicationIconBadgeNumber = function () { return cordovaInstance(this, "getApplicationIconBadgeNumber", {}, arguments); };
    PushObject.prototype.finish = function (id) { return cordovaInstance(this, "finish", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.clearAllNotifications = function () { return cordovaInstance(this, "clearAllNotifications", {}, arguments); };
    PushObject.prototype.subscribe = function (topic) { return cordovaInstance(this, "subscribe", {}, arguments); };
    PushObject.prototype.unsubscribe = function (topic) { return cordovaInstance(this, "unsubscribe", {}, arguments); };
    PushObject.pluginName = "PluginDemo";
    PushObject.plugin = "cordova-plugin-plugindemo";
    PushObject.pluginRef = "PluginDemo";
    return PushObject;
}());
export { PushObject };
//# sourceMappingURL=data:application/json;base64,